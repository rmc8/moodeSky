name: Release - Build and Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  # リリース前の品質チェック
  pre-release-checks:
    name: Pre-release Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./moodeSky/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install dependencies
        run: npm ci
        working-directory: ./moodeSky

      - name: TypeScript check
        run: npm run check
        working-directory: ./moodeSky

      - name: Rust checks
        run: |
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test
        working-directory: ./moodeSky/src-tauri

  # マルチプラットフォームビルド
  build:
    name: Build ${{ matrix.target }}
    needs: pre-release-checks
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: darwin
            arch: x64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin
            arch: arm64

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./moodeSky/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          workspaces: './moodeSky/src-tauri'

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./moodeSky

      - name: Build application
        run: npm run tauri build -- --target ${{ matrix.target }}
        working-directory: ./moodeSky
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Prepare artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p artifacts
          cp moodeSky/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage artifacts/ || true
          cp moodeSky/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb artifacts/ || true

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          cp moodeSky/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi artifacts/ || echo "No MSI found"
          cp moodeSky/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe artifacts/ || echo "No NSIS found"

      - name: Prepare artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p artifacts
          cp -r moodeSky/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg artifacts/ || true
          cp -r moodeSky/src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app artifacts/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moodeSky-${{ matrix.platform }}-${{ matrix.arch }}
          path: artifacts/*
          retention-days: 30

  # GitHub Release作成
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find release-artifacts -type f \( -name "*.AppImage" -o -name "*.deb" -o -name "*.msi" -o -name "*.exe" -o -name "*.dmg" -o -name "*.app" \) -exec cp {} release-files/ \;
          ls -la release-files/

      - name: Extract release notes
        id: extract-notes
        run: |
          # CHANGELOGからリリースノートを抽出 (ファイルが存在する場合)
          if [ -f "CHANGELOG.md" ]; then
            # 最初のセクション（最新バージョン）を抽出
            awk '/^## / { if (count++ > 0) exit } count > 0' CHANGELOG.md > release-notes.md
          else
            echo "自動リリース - $(date)" > release-notes.md
          fi

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: moodeSky ${{ steps.tag.outputs.tag }}
          body_path: release-notes.md
          files: release-files/*
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, 'alpha') || contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # モバイル対応 (将来の拡張用)
  mobile-build:
    name: Mobile Build (Future)
    needs: pre-release-checks
    runs-on: macos-latest
    if: false  # 現在は無効化、Tauri Mobile対応時に有効化
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build Android APK
        run: npm run tauri android build
        working-directory: ./moodeSky

      - name: Build iOS IPA
        run: npm run tauri ios build
        working-directory: ./moodeSky